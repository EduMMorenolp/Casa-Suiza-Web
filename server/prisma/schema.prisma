generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id           String         @id @default(uuid())
  username     String
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  isDeleted    Boolean        @default(false) @map("is_deleted")
  isActive     Boolean        @default(false) @map("is_active")
  role         Role           @default(USER)
  Order        Order[]
  Event        Event[]
  Notification Notification[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String?
  location    String?
  date        DateTime
  capacity    Int?
  promo       Boolean?
  soldOut     Boolean?
  price       Float
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  categoryId  String?
  organizerId String?
  category    Category? @relation(fields: [categoryId], references: [id])
  organizer   User?     @relation(fields: [organizerId], references: [id])

  tickets Ticket[]
  Coupon  Coupon[]
}

model Coupon {
  id           String    @id @default(uuid())
  code         String    @unique
  discount     Float // Porcentaje o monto fijo
  isPercentage Boolean   @default(true)
  expiresAt    DateTime?
  maxUses      Int? // Cantidad m√°xima de usos
  usedCount    Int       @default(0)
  createdAt    DateTime  @default(now())

  eventId String
  event   Event    @relation(fields: [eventId], references: [id])
  Ticket  Ticket[]

  @@index([code])
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  events Event[]
}

enum TicketStatus {
  PENDING
  PAID
  CANCELLED
}

model Ticket {
  id            Int          @id @default(autoincrement())
  checkedIn     Boolean      @default(false)
  eventId       String
  couponId      String?
  buyerName     String       @map("buyer_name")
  buyerLastName String       @map("buyer_last_name")
  buyerEmail    String       @map("buyer_email")
  buyerPhone    String?      @map("buyer_phone")
  buyerDni      String?      @map("buyer_dni")
  purchaseAt    DateTime     @default(now()) @map("purchase_at")
  status        TicketStatus @default(PENDING)

  event   Event   @relation(fields: [eventId], references: [id])
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
  coupon  Coupon? @relation(fields: [couponId], references: [id])

  @@index([eventId])
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model Order {
  id         String      @id @default(uuid())
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  tickets    Ticket[]
  Payment    Payment[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id        String        @id @default(uuid())
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String
  amount    Float
  method    String
  status    PaymentStatus
  createdAt DateTime      @default(now())
}

model Subscriber {
  id       Int     @id @default(autoincrement())
  subMail  String  @unique @map("sub_email")
  subPhone String? @unique @map("sub_phone")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}
